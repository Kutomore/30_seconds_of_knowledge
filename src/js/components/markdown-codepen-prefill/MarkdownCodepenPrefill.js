import React, {Component} from 'react';
import PropTypes from 'prop-types';
import CodepenPrefill from 'react-codepen-prefill';

import env from '../../../env';
import {extractCodeFromSnippet} from '../../api/snippets';

import codepenIcon from '../../../assets/images/icons/codepen.svg';

import './MarkdownCodepenPrefill.css';

const CLASS = 'sok-MarkdownCodepenPrefill';

const HEADING_LOOKUP_VALUE = 'Demo';

const HEADING_LEVEL_TYPES = {
	1: 'h1',
	2: 'h2',
	3: 'h3',
	4: 'h4',
	5: 'h5',
	6: 'h6',
};

class MarkdownCodepenPrefill extends Component {
	static propTypes = {
		level: PropTypes.number,
		children: PropTypes.array,
		source: PropTypes.string,
	};

	static defaultProps = {
		level: 1,
		children: null,
	};

	constructor(props) {
		super(props);

		this.state = {};
	}

	generateDemoMarkup = (html, css) => {
		return `
			<html>
				<head>
					${css && `<style>${css}</style>`}
				</head>
				<body>
					${html || ''}
				</body>
			</html>
		`;
	};

	renderCodepenPrefill = () => {
		const {children, source} = this.props;

		const codepenEnabled = env.active_platform === 'chromium';
		const shouldRender = children[0].props.value === HEADING_LOOKUP_VALUE;

		if (!shouldRender) {
			return null;
		}

		const htmlCode = extractCodeFromSnippet(source, 'html');
		const cssCode = extractCodeFromSnippet(source, 'css');
		const jsCode = extractCodeFromSnippet(source, 'js');
		const codepenButton = (
			<React.Fragment>
				<img src={codepenIcon} alt="CodePen Icon" />
				<span>Edit on CodePen</span>
			</React.Fragment>
		);

		return (
			<React.Fragment>
				<span className={CLASS+'-codepenPrefillToolbar'}>
					<CodepenPrefill
						label={codepenButton}
						className={`${CLASS}-codepenButton ${CLASS}-codepenButton-${
							codepenEnabled ? 'enabled' : 'disabled'
						}`}
						target="_blank"
						title="30 Seconds of Knowledge - Snippet"
						description="A snippet generated by 30 Seconds of Knowledge"
						js={jsCode}
						css={cssCode}
						html={htmlCode}
						editors="111"
					/>
					{!codepenEnabled && (
						<span className={`${CLASS}-codepenDisabledNotification`}>
							Note: This feature isn't available in Firefox.
						</span>
					)}
				</span>
				<div className={`${CLASS}-demoContainer`}>
					{jsCode && (
						<span className={`${CLASS}-jsNotif`}>
							<strong>WARNING:</strong> This snippet uses Javascript! Because of security issues, we
							are not able to run Javascript inside this preview. To see the intended behavior,
							please open the snippet on Codepen!
						</span>
					)}
					<iframe
						className={`${CLASS}-snippetPreviewRenderer`}
						title={'30 Seconds of Knowledge - Demo'}
						sandbox="allow-scripts"
						allowFullScreen={true}
						srcDoc={this.generateDemoMarkup(htmlCode, cssCode, jsCode)}
					/>
				</div>
			</React.Fragment>
		);
	};

	render() {
		const {level, children} = this.props;
		const Type = HEADING_LEVEL_TYPES[level];

		return (
			<React.Fragment>
				<Type>{children}</Type>
				{this.renderCodepenPrefill()}
			</React.Fragment>
		);
	}
}

export default MarkdownCodepenPrefill;
